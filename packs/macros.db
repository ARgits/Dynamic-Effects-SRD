{"_id":"5QMyL9TRKHzKScdS","name":"Invisibility","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet target = canvas.tokens.get(args[1])\r\nif(args[0] === \"on\"){\r\nTokenUpdate.execute(args[1],{\"hidden\": true});\r\nChatMessage.create({content: target.name + \" is invisible\"})\r\n} else {\r\n    TokenUpdate.execute(args[1],{\"hidden\": false});\r\n    ChatMessage.create({content: target.name + \" is no longer invisible\"})\r\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Eyebite","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yrTB6zHbr4HwYGnS"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorSetFlag\");\n\n// get the hookId here\nconst hookIdFlag = ActorGetFlag.execute(args[1], \"world\", \"EyebiteSpell\");\nconsole.log(hookIdFlag)\n\nif (args[0] === \"on\") {\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\n        if (!(\"round\" in update || \"turn\" in update)) return;\n        if (combat.combatant.tokenId === args[1]) {\n            new Dialog({\n                title: \"Eyebite options\",\n                content: \"<p>Target a token and select the effect</p>\",\n                buttons: {\n                    one: {\n                        label: \"Asleep\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    game.cub.addCondition(\"Unconscious\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                            }\n                        }\n                    },\n                    two: {\n                        label: \"Panicked\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    game.cub.addCondition(\"Unconscious\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n\n                            }\n                        }\n                    },\n                    three: {\n                        label: \"Sickened\",\n                        callback: () => {\n                            for (let target of game.user.targets) {\n                                let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                                save_roll.toMessage({\n                                    speaker: ChatMessage.getSpeaker({ token: target }),\n                                    rollMode: \"blindroll\"\n                                });\n                                if (save_roll.total < args[2]) {\n                                    ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                                    game.cub.addCondition(\"Poisoned\", target)\n                                } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                            }\n                        }\n                    },\n                }\n            }).render(true);\n\n        }\n    });\n    ActorSetFlag.execute(args[1], \"world\", \"EyebiteSpell\", hookId);\n    ChatMessage.create({ content: target.name + \" is blessed with Eyebite\" });\n    new Dialog({\n        title: \"Eyebite options\",\n        content: \"<p>Target a token and select the effect</p>\",\n        buttons: {\n            one: {\n                label: \"Asleep\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            game.cub.addCondition(\"Unconscious\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                    }\n                }\n            },\n            two: {\n                label: \"Panicked\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            game.cub.addCondition(\"Unconscious\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n\n                    }\n                },\n            },\n            three: {\n                label: \"Sickened\",\n                callback: () => {\n                    for (let target of game.user.targets) {\n                        let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\n\n                        save_roll.toMessage({\n                            speaker: ChatMessage.getSpeaker({ token: target }),\n                            rollMode: \"blindroll\"\n                        });\n                        if (save_roll.total < args[2]) {\n                            ChatMessage.create({ content: target.name + \"failed the save with a \" + save_roll.total })\n                            game.cub.addCondition(\"Poisoned\", target)\n                        } else ChatMessage.create({ content: target.name + \"passed the save with a \" + save_roll.total })\n                    }\n                }\n            },\n        }\n    }).render(true)\n\n}\nif (args[0] === \"off\") {\n    ChatMessage.create({ content: \"Eyebite is removed\" });\n    Hooks.off(\"updateCombat\", hookIdFlag);\n    ActorUnSetFlag.execute(args[1], \"world\", \"EyebiteSpell\");\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"9a3Ultp5tzsLIisI"}
{"name":"BlindDeaf","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.oiEgd0VHxlxJZsWN"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nif (args[0] === \"on\") {\n    new Dialog({\n        title: \"Choose an Effect\",\n        buttons: {\n            one: {\n                label: \"Blindness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 1 )\n                }\n            },\n            two: {\n                label: \"Deafness\",\n                callback: () => {\n                    game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 1 )\n                }\n            }\n        },\n    }).render(true);\n}\nif(args[0] === \"off\"){\n    if (target.actor.getFlag('world', 'DE Blinded')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Blinded\", args[1], 2 )\n    } else if (target.actor.getFlag('world', 'DE Deafened')) {\n        game.macros.getName(\"BlindExecute\").execute(\"Deafened\", args[1], 2 )\n    }\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"9cZIxmBVwbFpE9cP"}
{"_id":"DHETVvB5IFP8hqaf","name":"SpellRemoval","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let SpellOff = game.macros.getName(\"SpellOff\");\r\nasync function choose(options = [], prompt = ``) {\r\n    let value = await new Promise((resolve, reject) => {\r\n\r\n        let dialog_options = (options[0] instanceof Array)\r\n            ? options.map(o => `<option value=\"${o[0]}\">${o[1]}</option>`).join(``)\r\n            : options.map(o => `<option value=\"${o}\">${o}</option>`).join(``);\r\n\r\n        let content = `${prompt}<br><select id=\"choice\">${dialog_options}</select>`;\r\n\r\n        new Dialog({\r\n            content,\r\n            buttons: { OK: { label: `OK`, callback: async (html) => { resolve(html.find('#choice').val()); } } }\r\n        }).render(true);\r\n    });\r\n    return value;\r\n}\r\n\r\n(async () => {\r\n    let choice = await choose(Object.keys(actor.data.flags.world), `Choose something : `);\r\n    if (choice === \"barkskin\") {\r\n        SpellOff.execute(\"Barkskin\")\r\n    }\r\n    if (choice === \"DE Blinded\" || \"DE Deafened\") {\r\n        SpellOff.execute(\"BlindDeaf\")\r\n    } \r\n    if (choice === \"darkvisionSpell\") {\r\n        SpellOff.execute(\"Darkvision\")\r\n    } \r\n    if (choice === \"elementalWeapon\") {\r\n        SpellOff.execute(\"Darkvision\")\r\n    } \r\n    if (choice === \"enhanceAbility\") {\r\n        SpellOff.execute(\"Enhance Ability\")\r\n    } \r\n    if (choice === \"EyebiteSpell\") {\r\n        SpellOff.execute(\"Eyebite\")\r\n    } \r\n    if (choice === \"FireShield\") {\r\n        SpellOff.execute(\"Fire Shield\")\r\n    } \r\n    if (choice === \"Haste\") {\r\n        SpellOff.execute(\"Haste\")\r\n    } \r\n    if (choice === \"HeroesFeast\") {\r\n        SpellOff.execute(\"HeroesFeast\")\r\n    } \r\n    if (choice === \"ProtectionFromEnergy\") {\r\n        SpellOff.execute(\"ProtectionFromEnergy\")\r\n    } \r\n    if (choice === \"magicWeapon\") {\r\n        SpellOff.execute(\"Magic Weapon\")\r\n    } \r\n    if (choice === \"banishment\") {\r\n        SpellOff.execute(\"Banishment\")\r\n    } \r\n     if (choice === \"enlageReduceSpell\") {\r\n        SpellOff.execute(\"EnlargeReduce\")\r\n    } \r\n     if (choice === \"heroismUpdateCombatHookId\") {\r\n        SpellOff.execute(\"Heroism\")\r\n    } \r\n     if (choice === \"Longstrider\") {\r\n        SpellOff.execute(\"Longstrider\")\r\n    } \r\n     if (choice === \"rayOfFrost\") {\r\n        SpellOff.execute(\"Ray of Frost\")\r\n    } \r\n     if (choice === \"shillelagh\") {\r\n        SpellOff.execute(\"Shillelagh\")\r\n    }\r\n    if (choice === \"AlterSelfSpell\") {\r\n        SpellOff.execute(\"Alter Self\")\r\n    }\r\n})();","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Aid","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nif (!target) {\r\n  ChatMessage.create({content: `Token ${args[1]} is no longer in scene`, whisper: ChatMessage.getWhisperIDs(\"GM\")})\r\n  return;\r\n}\r\n\r\nlet increment = 5 * (args[2] - 1);\r\nif (!args[2]) increment = 5;\r\nlet hpMax = target.actor.data.data.attributes.hp.max;\r\nlet hp = target.actor.data.data.attributes.hp.value;\r\n\r\nif (args[0] === \"on\") {\r\n  target.actor.update({\"data.attributes.hp.max\": hpMax + increment, \"data.attributes.hp.value\": hp + increment})\r\nChatMessage.create({content: `Aid Spell: ${target.name} received ${increment} HP`})\r\n} else {\r\n  target.actor.update({\"data.attributes.hp.max\": hpMax - increment, \"data.attributes.hp.value\": Math.min(hp, hpMax - increment)})\r\nChatMessage.create({content: `Aid Spell Expiry: ${target.name} Max HP reduced by ${increment}`})\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"EQUckCxqTELGBy6O"}
{"name":"Rage","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\n//\n//\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\n//\t\t\t\t\t\t\tFixed rage damage at level 8\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\n//\t\t\t\t\t\t\tFixed rage damage formula again...\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\n//\t\t\t\t\t\t4.\t(2020/06/04) \n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\n//\t\t\t\t\t\t5.\t(2020/06/10)\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\n//\t\t\t\t\t\t\tEnhanced localization support\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\n//!!!\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \n//!!!\t\t\tBear Totem Spirit resistances.\n//!!!\n//!!!\tBonus Tip 3: \t\tThrown Weapons\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\n//!!!\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\n//!!!\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst rageIconPath = 'icons/svg/explosion.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\n\n\t\t\tconst deductResource = true;\n\t\t\tconst preventNegativeResource = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\n//!!!\n\t\t\tconst strAttacks = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\n\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\tconst toggleMacro = false;\n\n\t\t\t//To use a different icon, manually change the filepath here\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\n\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\tconst rageMacroName = 'Rage';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//declarations\nlet barb = '';\nlet chatMsg = '';\nlet bear = '';\nlet noRage = false;\nlet rageDmgAdded = false;\nlet toggleResult = false;\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\n//!!!\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\n\t\t\tconst barbClassName = 'Barbarian';\n\t\t\tconst rageResourceName = 'Rage';\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\n\n\t\t\t//All remaining values may be changed freely\n\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\n\t\t\tconst endRageMsg =  ' is no longer raging.';\n\n\t\t\t//error and warning messages\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\n\t\t\tconst errorSelectToken = 'Please select a token.';\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//main\n//check to see if Actor exists and is a barbarian\nif (macroActor !== undefined && macroActor !== null) {\n\n\t// get the barbarian class item\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\n\tif (barb == undefined) {\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\n\t}\n\tif (barb !== undefined && barb !== null) {\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\n\t\tlet enabled = false;\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\n\t\t\t\t\trageDmgAdded = true;\n\t\t\t\t}\n\t\t}\n\n\t\t//Calculate rage value for use in damage reversion and application\n\t\t// Determining the barbarian level\n\t\tlet barblvl = barb.data.data.levels;\n\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\n\n\t\t// if rage is active, disable it\n\t\tif (enabled) {\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\n\t\t\t// reset resistances and melee weapon attack bonus\n\t\t\tlet obj = {};\n\t\t\tobj['flags.rageMacro'] = null;\n\t\t\t//revert damage resistances\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\n\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\n\t\t\t//eventually want to add support so only last instance found is replaced.\n\t\t\tif(rageDmgAdded) {\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\n\t\t\t\t\tconsole.log('Removing simple rage damage');\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Removing complex rage damage');\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\n\t\t\t\t\tlet result = dmg.search(patt);\n\t\t\t\t\tif (result !== -1) {\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmacroActor.update(obj);\n\n\t\t// if rage is disabled, enable it\n\t\t} else {\n\t\t\tif (deductResource) {\n\t\t\t\tlet hasAvailableResource = false;\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\n\t\t\t\tlet obj = {}\n\t\t\t\t// Look for Resources under the Core macroActor data\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\n\t\t\t\t\thasAvailableResource = true;\n\t\t\t\t\tnewResources[resourceKey].value--;\n\t\t\t\t\tobj['data.resources'] = newResources \n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t\tif (!hasAvailableResource) {\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\n\t\t\t\t\tnoRage=true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\n\t\t\tif (!noRage) {\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\n\t\t\t\t// update resistance\n\t\t\t\tlet obj = {};\n\t\t\t\t// storing old resistances in flags to restore later\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\n\t\t\t\t//If bear totem, add bear totem resistances.\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\n\t\t\t\tif (bear !== undefined && bear!== null) {\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\n\t\t\t\t}\n\t\t\t\tobj['data.traits.dr'] = newResistance;\n\t\t\t\tmacroActor.update(obj);\n\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\n\t\t\t\tif (strAttacks) {\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\n\t\t\t\t\t}\n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!noRage) {\n\t\t\t// toggle rage icon, if rage path is defined above\n\t\t\t(async () => { \n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \n\t\t\t})();\n\t\t\t\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\n\t\t\t\t//check for name of macro in its \"off\" form\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\n\t\t\t\t}\n\t\t\tlet obj = {};\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\n\t\t\t\tif (enabled) {\n\t\t\t\t  obj['img'] = rageIconPath;\n\t\t\t\t  obj['name'] = rageMacroName;\n\t\t\t\t} else {\n\t\t\t\t  obj['img'] = stopRageIconPath;\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\n\t\t\t\t}\n\t\t\t\trageMacro.update(obj);\n\t\t\t} else {\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\n\t\t\t}\n\t\t}\n\t}\n} else ui.notifications.warn(errorSelectToken);\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"EajSH7Kkc9eMaSqB"}
{"_id":"IbpEUtL9u8v8SK8r","name":"Enhance Ability","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const targetArray = [args[1]]\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\n\r\nif (args[0] === \"on\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        if (target && !target.getFlag('world', 'enhanceAbility')) {\r\n            new Dialog({\r\n                title: \"Choose enhance ability effect for \" + target.name,\r\n                buttons: {\r\n                    one: {\r\n                        label: \"Bear's Endurance\",\r\n                        callback: () => {\r\n                            let formula = `2d6`;\r\n                            let amount = new Roll(formula).roll().total;\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"bear\",\r\n                            });\r\n                            ChatMessage.create({ content: target.name + \" gains \" + amount + \" temp Hp\" })\r\n                            ActorUpdate.execute(args[1], { \"data.attributes.hp.temp\": amount });\r\n\r\n                        }\r\n                    },\r\n                    two: {\r\n                        label: \"Bull's Strength\",\r\n                        callback: () => {\r\n                            ChatMessage.create({ content: target.name + \"s encumberance is doubled\" })\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"bull\"\r\n                            });\r\n                            ActorSetFlag.execute(args[1], 'dnd5e', 'powerfulBuild', true)\r\n                        }\r\n                    },\r\n                    three: {\r\n                        label: \"Other\",\r\n                        callback: () => {\r\n                            ActorSetFlag.execute(args[1], 'world', 'enhanceAbility', {\r\n                                name: \"other\",\r\n                            });\r\n                            ChatMessage.create({ content: \"A non automated Ability was enhanced for \" + target.name })\r\n                        }\r\n                    }\r\n                }\r\n            }).render(true);\r\n        }\r\n    })\r\n}\r\nif (args[0] === \"off\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        let flag = target.actor.getFlag('world', 'enhanceAbility');\r\n        if (flag.name === \"bull\") ActorUnSetFlag.execute(args[1], 'dnd5e', 'powerfulBuild', false)\r\n        ActorUnSetFlag.execute(args[1], 'world', 'enhanceAbility')\r\n        ChatMessage.create({ content: \"Enhance Ability has expired\" })\r\n    }\r\n    )\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"LnYog6K6tzzjiyZh","name":"Longstrider","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet TokenSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet TokenUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\n\r\nif (args[0] === \"on\" && !target.actor.getFlag('world', 'Longstrider')) {\r\n    let newSpeed = (speed + 10) + \"ft\";\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": newSpeed });\r\n    TokenSetFlag.execute(args[1], 'world', 'Longstrider', speed);\r\n    ChatMessage.create({ content: target.name + \" has their speed increased by 10ft\" })\r\n} else if (args[0] === \"off\" ) {\r\n    let newSpeed = target.actor.getFlag('world', 'Longstrider')\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    TokenUnSetFlag.execute(args[1], 'world', 'Longstrider');\r\n    ChatMessage.create({ content: target.name + \" has their speed returned to normal\" })\r\n}\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"HasteSpell","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\n\r\nif (args[0] === \"on\" ) {\r\n    let newSpeed = (speed * 2) + \"ft\";\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": newSpeed });\r\n    ActorSetFlag.execute(args[1], 'world', 'Haste', speed);\r\n    ChatMessage.create({ content: target.name + \" has Haste applied\" })\r\n} \r\nif (args[0] === \"off\") {\r\n    let newSpeed = target.actor.getFlag('world', 'Haste')\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    ActorUnSetFlag.execute(args[1], 'world', 'Haste');\r\n    ChatMessage.create({ content: target.name + \" has their speed returned to normal\" })\r\n}\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"Lt6N34Ox0RL1YBB1"}
{"name":"BlindExecute","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.pbwtxuz3PnYmu8sB"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\n\nif (args[2] === 1){\n    game.cub.addCondition(args[0], target)\n    let flag = \"DE \" + args[0]\n    ActorSetFlag.execute(args[1], 'world', flag, 1)\n    ChatMessage.create({content: target.name + \" has been \" + args[0]})\n} if(args[2] === 2){\n        let flag = \"DE \" + args[0]\n        game.cub.removeCondition(args[0], target);\n        ChatMessage.create({content: target.name + \" is no longer \" + args[0]})\n        ActorUnSetFlag.execute(args[1], 'world', flag)\n    }","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"NX3K1iFlG3dHEwsA"}
{"name":"Alter Self","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KtmNCau8UBMjTv46"}},"scope":"global","command":"console.log(\"in macro\")\nlet item = actor.items.find(i => i.name === `Unarmed Strike`);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\nconsole.log(item)\nif (args[0] === \"on\") {\n    if (token) {\n        new Dialog({\n            title: \"Are you using Natural Weapons\",\n            content: \"<p>Yes or no</p>\",\n            buttons: {\n                one: {\n                    label: \"Yes\",\n                    callback: () => {\n                        if (!item){\n                            ChatMessage.create({content: \"No unarmed strike found\"})\n                            return;\n                        }\n                        let copy_item = duplicate(item);\n                        ActorSetFlag.execute(args[1],'world', 'AlterSelfSpell', copy_item.data.damage.parts[0][0])\n                        copy_item.data.damage.parts[0][0] = \"1d6 +@mod\"\n                        actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n                        ChatMessage.create({content: \"Unarmed strike is altered\"})\n                    }\n                },\n                    two: {\n                        label: \"No\",\n                        callback: () => ChatMessage.create({ content: `Unarmed strike not altered` })\n                },\n            }\n        }).render(true);\n    }\n} \nif(args[0] === \"off\") {\n    let damage = actor.getFlag('world', 'AlterSelfSpell')\ndebugger\n    let copy_item = duplicate(item);\n    copy_item.data.damage.parts[0][0] = damage\n    actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n    ActorUnSetFlag.execute(args[1],'world', 'AlterSelfSpell',);\n    ChatMessage.create({ content: `Alter Self expired, unarmed strike returned` })\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"P58yfAT04DxOadeM"}
{"name":"Levitate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet target = canvas.tokens.get(args[1]);\r\nif (args[0] === \"on\") {\r\n    ChatMessage.create({ content: target.name + \" is levitated 20ft\" })\r\n    TokenUpdate.execute(args[1], { \"elevation\": 20 });\r\n} else {\r\n    TokenUpdate.execute(args[1], { \"elevation\": 0 });\r\n    ChatMessage.create({ content: target.name + \" is returned to the ground\" })\r\n    if (game.modules.get(\"condition-automation\")?.active) {\r\n        ChatMessage.create({content: \"test\"})\r\n        TokenMagic.deleteFiltersOnSelected(\"autoShadow\");\r\n        TokenMagic.deleteFiltersOnSelected(\"autoTwist\");\r\n        TokenMagic.deleteFiltersOnSelected(\"autoBulge\");\r\n    }\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UDZROf1vwxy56tdD"}
{"_id":"VBS7PaUrJBKskVmg","name":"Boots of Striding","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet TokenSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet TokenUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\n\r\nif (!target.getFlag('world', 'bootsOfStriding')) {\r\n    let newSpeed = (speed < 30) ? 30 : speed;\r\n    console.log(newSpeed)\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    ActorSetFlag.execute(args[1], 'world', 'bootsOfStriding', speed);\r\n} else if (target.getFlag('world', 'bootsOfStriding')) {\r\n    let newSpeed = target.getFlag('world', 'bootsOfStriding')\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    TActorUnSetFlag.execute(args[1], 'world', 'bootsOfStriding');\r\n}\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Shillelagh","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet weapons = target.actor.items.filter(i => i.data.type === `weapon`);\r\nlet weapon_content = ``;\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\n\r\n\r\nfor (let weapon of weapons) {\r\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\r\n}\r\nif (args[0] === \"on\" && !target.getFlag('world', 'shillelagh')) {\r\n    let content = `\r\n<div class=\"form-group\">\r\n  <label>Weapons : </label>\r\n  <select name=\"weapons\">\r\n    ${weapon_content}\r\n  </select>\r\n</div>`;\r\n\r\n    new Dialog({\r\n        title: \"Choose a club or quarterstaff\",\r\n        content,\r\n        buttons:\r\n        {\r\n            Ok:\r\n            {\r\n                label: `Ok`,\r\n                callback: (html) => {\r\n                    console.log(html.find('[name=weapons]')[0].value);\r\n                    let itemId = html.find('[name=weapons]')[0].value;\r\n                    let item = token.actor.items.get(itemId);\r\n                    console.log(item)\r\n                    let copy_item = duplicate(item);\r\n                    ActorSetFlag.execute(args[1], `world`, `shillelagh`, {\r\n                        id : itemId,\r\n                        damage : copy_item.data.damage.parts[0][0]    \r\n                    });\r\n                    let damage = copy_item.data.damage.parts[0][0]\r\n                    console.log(typeof damage)\r\n                    var newdamage = damage.replace(/1d(4|6)/g,\"1d8\");\r\n                    console.log(newdamage)\r\n                    copy_item.data.damage.parts[0][0] = newdamage;\r\n                    copy_item.data.ability = \"wis\"\r\n                    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n                    ChatMessage.create({content: copy_item.name + \" is empowered\"})\r\n                }\r\n            },\r\n            Cancel:\r\n            {\r\n                label: `Cancel`\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nif (args[0] === \"off\") {\r\n    let flag = target.actor.getFlag(`world`, `shillelagh`);\r\n    let itemId = flag.id;\r\n    let damage = flag.damage;\r\n    let item = token.actor.items.get(itemId);\r\n    let copy_item = duplicate(item);\r\n    copy_item.data.damage.parts[0][0] = damage;\r\n    copy_item.data.ability = \"\"\r\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n    ActorUnSetFlag.execute(args[1], `world`, `shillelagh`);\r\n    ChatMessage.create({content: copy_item.name + \" returns to normal\"})\r\n\r\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"X8vR4dksBLG77Mzr"}
{"name":"Boots of Speed","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.6lbP06dm7YmO8vGE"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\n\nif (!target.actor.getFlag('world', 'bootsOfSpeed')) {\n    let newSpeed = (speed * 2) + \"ft\";\n    ActorUpdate.execute(args[1], {\"data.attributes.speed.value\": newSpeed});\n    ActorSetFlag.execute(args[1], 'world', 'bootsOfSpeed', speed);\n} else {\n    let newSpeed = target.actor.getFlag('world', 'bootsOfSpeed')\n    ActorUpdate.execute(args[1],{\"data.attributes.speed.value\": (newSpeed + \"ft\")});\n    ActorUnSetFlag.execute(args[1],'world', 'bootsOfSpeed');\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"YmTUKDWwi6cmNIFq"}
{"name":"CUB condition control","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nif (args[2] === 1){\r\n    game.cub.applyCondition(args[0], target)\r\n    let flag = \"DE \" + args[0]\r\n    target.setFlag('world', flag, 1)\r\n} else {\r\n    if(args[2] === 2){\r\n        console.log(\"test\")\r\n        let flag = \"DE \" + args[0]\r\n        game.cub.removeCondition(args[0], target);\r\n        target.unsetFlag('world', flag)\r\n    }\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"eJu7luJizt0iXymV"}
{"_id":"f9iF0LcMNJE134XO","name":"Magic Weapon","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet targetActor = target.actor;\r\nlet weapons = targetActor.items.filter(i => i.data.type === `weapon`);\r\nlet weapon_content = ``;\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\nfor (let weapon of weapons) {\r\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\r\n}\r\nif (args[0] === \"on\") {\r\n    let content = `\r\n<div class=\"form-group\">\r\n  <label>Weapons : </label>\r\n  <select name=\"weapons\">\r\n    ${weapon_content}\r\n  </select>\r\n</div>`;\r\n\r\n    new Dialog({\r\n        content,\r\n        buttons:\r\n        {\r\n            Ok:\r\n            {\r\n                label: `Ok`,\r\n                callback: (html) => {\r\n                    let itemId = html.find('[name=weapons]')[0].value;\r\n                    let item = targetActor.items.get(itemId);\r\n                    let copy_item = duplicate(item);\r\n                    console.log(copy_item)\r\n                    function value_limit(val, min, max) {\r\n                        return val < min ? min : (val > max ? max : val)\r\n                    };\r\n                    let spellLevel = Math.floor(args[2] / 2);\r\n                    let bonus = value_limit(spellLevel, 1, 3);\r\n                    let wpDamage = copy_item.data.damage.parts[0][0]\r\n                    ActorSetFlag.execute(args[1], `world`, `magicWeapon`, {\r\n                        damage :bonus,\r\n                        weapon : itemId,\r\n                        weaponDmg : wpDamage,\r\n                    });\r\n                    copy_item.data.attackBonus = (copy_item.data.attackBonus + bonus)\r\n                    copy_item.data.damage.parts[0][0] = (wpDamage + \" + \" + bonus)\r\n                    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n                }\r\n            },\r\n            Cancel:\r\n            {\r\n                label: `Cancel`\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nif (args[0] === \"off\") {\r\n    let flag = target.actor.getFlag('world','magicWeapon')\r\n    let wpDamage = flag.weaponDmg\r\n    let itemId = flag.weapon\r\n    let item = target.actor.items.get(itemId);\r\n    console.log(item)\r\n    let bonus = flag.damage;\r\n    let copy_item = duplicate(item);\r\n    console.log(copy_item)\r\n    copy_item.data.attackBonus = (copy_item.data.attackBonus - bonus);\r\n    copy_item.data.damage.parts[0][0] = wpDamage\r\n    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n    ActorUnSetFlag.execute(args[1], `world`, `magicWeapon`);    \r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"fyoofWCI9kPl320Z","name":"Darkvision","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet dimVision = target.dimSight\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\n\r\n\r\nif (args[0] === \"on\") {\r\n    ActorSetFlag.execute(args[1], 'world', 'darkvisionSpell', dimVision)\r\n    ActorUpdate.execute(args[1],{ \"dimSight\" : 60 })\r\n    ChatMessage.Create({content: target.name + \"'s vision has been improve\"})\r\n}\r\nif(args[0] === \"off\") {\r\n    let sight = target.getFlag('world', 'darkvisionSpell');\r\n    ActorUpdate.execute(args[1],{ \"dimSight\" : sight });\r\n    ActorUnSetFlag.execute(args[1], 'world', 'darkvisionSpell')\r\n    ChatMessage.Create({content: target.name + \"'s vision has been improved\"})\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = actor ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\n(async()=>{\r\n  await canvas.tokens.get(args[0]).actor.update(args[1]);\r\n})();","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"gZ22yWmRBsL6hHxi"}
{"_id":"h53SXiPj68gBkXsP","name":"Heroism","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let mod = args[2];\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\n\r\n// get the hookId here\r\nconst hookIdFlag = ActorGetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\");\r\nconsole.log(hookIdFlag)\r\n\r\nif (args[0] === \"on\") {\r\nChatMessage.create({content : \"Heroism is applied to targets\" })\r\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\r\n        if (!(\"round\" in update || \"turn\" in update)) return;\r\n        if (combat.combatant.tokenId === args[1]) {\r\n            let target = canvas.tokens.get(args[1]);\r\n            ActorUpdate.execute(args[1],{ \"data.attributes.hp.temp\": mod });\r\n            ChatMessage.create({ content: \"Heroism continues on \" + target.name  })\r\n        }\r\n    });\r\n    ActorSetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\", hookId);\r\n\r\n}\r\nif (args[0] === \"off\") {\r\nChatMessage.create({content : \"Heroism ends\"});\r\n    Hooks.off(\"updateCombat\", hookIdFlag);\r\n    ActorUnSetFlag.execute(args[1], \"world\", \"heroismUpdateCombatHookId\");\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"HeroesFeast","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"const targetArray = [args[1]]\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\r\nlet formula = \"2d10\";\r\nlet amount = new Roll(formula).roll().total;\r\n\r\nif (args[0] === \"on\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        let hpMax = target.actor.data.data.attributes.hp.max\r\n        let hp = target.actor.data.data.attributes.hp.value\r\n        let conditionImmunity = target.actor.data.data.traits.ci.value\r\n        conditionImmunity.push(\"frightened\")\r\n        ActorUpdate.execute(args[1], { \"data.attributes.hp.max\": (hpMax + amount), \"data.attributes.hp.value\": (hp + amount) });\r\n        ChatMessage.create({content: target.name + \" gains \" + amount + \" Max HP\"})\r\n        ActorSetFlag.execute(args[1], 'world', 'HeroesFeast', amount)\r\n    })\r\n};\r\nif (args[0] === \"off\") {\r\n    targetArray.forEach((element) => {\r\n        let target = canvas.tokens.get(args[1]);\r\n        let amount = ActorGetFlag.execute(args[1], 'world', 'HeroesFeast')\r\n        let hpMax = target.actor.data.data.attributes.hp.max\r\n        let conditionImmunity = target.actor.data.data.traits.ci.value\r\n        const index = resistances.indexOf(\"frightened\")\r\n        resistances.splice(index, 1)\r\n        ActorUpdate.execute(args[1], { \"data.attributes.hp.max\": (hpMax - amount) });\r\n        ChatMessage.create({content: target.name + \"'s Max HP returns to normal\"})\r\n        ActorUnSetFlag.execute(args[1], 'world', 'HeroesFeast')\r\n    })\r\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"hMSNDJQTAMUH2Pmx"}
{"_id":"i6DSivgfgnmiQu2N","name":"DarkOnesBlessing","permission":{"default":0,"dv1o3vH3k0ku7ro4":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro                   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"if (token) {\r\n    let level = parseInt(args[2]);\r\n    let cha = parseInt(args[3]);\r\n    let total= level + cha;\r\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\r\n    token.actor.update({\"data.attributes.hp.temp\": total}) \r\n    ChatMessage.create({content: `Mikhail is replenished as the creature dies`});\r\n} else {\r\n    ui.notifications.notify(\"Please select a token.\");\r\n}","author":"dv1o3vH3k0ku7ro4","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"ActorGetFlag","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.SUOiDsbuMxlXuldC"}},"scope":"global","command":"return canvas.tokens.get(args[0]).actor.getFlag(args[1], args[2]);","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jQ2qw96yD5YXNpRC"}
{"_id":"lMAmkU13CpJ9KUUG","name":"Ring of Invisibility","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet hidden = target.data.hidden;\r\nlet visible = hidden ? false : true;\r\nTokenUpdate.execute(args[1],{\"hidden\": visible});\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"lefVX9mOaAfispDq","name":"ActorSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.setFlag(args[1], args[2], args[3]);\r\n\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"mR5hGlqpWobrNxZg","name":"Ray of Frost","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\n\r\n\r\nif (args[0] === \"on\") {\r\n    let newSpeed = speed - 10\r\n    ActorSetFlag.execute(args[1], 'world', 'rayOfFrost', speed)\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\" : (newSpeed + \" ft\") })\r\n    ChatMessage.create({content: target.name + \" has their speed decreased by 10ft\"})\r\n} else {\r\n    let newSpeed = target.actor.getFlag('world', 'rayOfFrost');\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\" : newSpeed });\r\n    ActorUnSetFlag.execute(args[1], 'world', 'rayOfFrost')\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"EnlargeReduce","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tKKbvoCkf5A37rsc"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet originalSize = target.data.width;\nlet mwak = target.actor.data.data.bonuses.mwak.damage\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nif (args[0] === \"on\" && !target.getFlag('world', 'enlageReduceSpell')) {\n    if (target) {\n        new Dialog({\n            title: \"Enlarge or Reduce\",\n            buttons: {\n                one: {\n                    label: \"Enlarge\",\n                    callback: () => {\n                        let bonus = mwak + \" 1d4\";\n                        let enlarge = (originalSize + 1);\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\n                        TokenUpdate.execute(args[1],{\"width\": enlarge, \"height\": enlarge});\n                        ActorSetFlag.execute(args[1], 'world', 'enlageReduceSpell', {\n                            size: originalSize,\n                            ogMwak: mwak,\n                        })\n                        ChatMessage.create({content: target.name + \" is enlarged\"})\n                    }\n                },\n                    two: {\n                        label: \"Reduce\",\n                        callback: () => {\n                        let bonus = mwak +  \" -1d4\";\n                        let size = originalSize\n                        let newSize = (size > 1) ? (size -1) : (size - 0.3)\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\n                        TokenUpdate.execute(args[1],{\"width\": newSize, \"height\": newSize});\n                        ActorSetFlag.execute(args[1], 'world', 'enlageReduceSpell', {\n                            size : originalSize,\n                            ogMwak : mwak,\n                        })\n                        ChatMessage.create({content: target.name + \" is reduced\"})\n                        }\n                },\n            }\n        }).render(true);\n    }\n} else if(args[0] === \"off\"){\n    let flag = target.actor.getFlag('world', 'enlageReduceSpell')\n    ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : flag.ogMwak })\n    TokenUpdate.execute(args[1],{\"width\": flag.size, \"height\": flag.size});\n    ActorUnSetFlag.execute(args[1], 'world', 'enlageReduceSpell')\n    ChatMessage.create({content: target.name + \" is returned to normal size\"})\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"nRqR9H4HOXahU9RC"}
{"name":"FireShield","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.bvIHiiIZMdgXaAzn"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\n\nif (args[0] === \"on\") {\n    if (token) {   \n        new Dialog({\n            title: \"Warm or Cold Shield\",\n            buttons: {\n                one: {\n                    label: \"Warm\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value\n                        resistances.push(\"cold\")\n                        target.actor.update({ \"data.traits.dr.value\": resistances })\n                        ActorSetFlag.execute(args[1], 'world', 'FireShield', \"cold\")\n                        ChatMessage.create({ content: target.name + \" gains resistnace to cold\" })\n                    }\n                },\n                two: {\n                    label: \"Cold\",\n                    callback: () => {\n                        let resistances = target.actor.data.data.traits.dr.value\n                        resistances.push(\"fire\")\n                        target.actor.update({ \"data.traits.dr.value\": resistances })\n                        ActorSetFlag.execute(args[1], 'world', 'FireShield', \"fire\")\n                        ChatMessage.create({ content: target.name + \" gains resistnace to fire\" })\n                    }\n                },\n            }\n        }).render(true);\n\n    }\n}\nif (args[0] === \"off\") {\n    let element = ActorGetFlag.execute(args[1], 'world', 'FireShield')\n    let resistances = target.actor.data.data.traits.dr.value\n    const index = resistances.indexOf(element)\n    resistances.splice(index, 1)\n    target.actor.update({ \"data.traits.dr.value\": resistances })\n    ChatMessage.create({ content: \"Fire Shield expires on \" + target.name})\n\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"neKC6vCIHJscwDVN"}
{"name":"TokenUpdate","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).update(args[1]);","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"o5hi8GyaO6DgcApN"}
{"name":"SpellOff","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"\r\nlet Off= game.macros.getName(args[0]);\r\nOff.execute(\"off\", token.id);","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"rP2s0Uebrn3gkTy0"}
{"_id":"rwrWL0D1Pcmh7FBI","name":"ProtectionFromEnergy","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\n\nif (args[0] === \"on\") {\n    let d = new Dialog({\n        title: 'Choose a damage type',\n        content: `\n          <form class=\"flexcol\">\n            <div class=\"form-group\">\n              <select id=\"element\">\n                <option value=\"acid\">Acid</option>\n                <option value=\"cold\">Cold</option>\n                <option value=\"fire\">Fire</option>\n                <option value=\"lightning\">Lightning</option>\n                <option value=\"thunder\">Thunder</option>\n              </select>\n            </div>\n          </form>\n        `,\n        buttons: {\n            yes: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: 'Yes',\n                callback: (html) => {\n                    let element = html.find('#element').val();\n                    let resistances = \n                    target.actor.data.data.traits.dr.value        \n                    resistances.push(element)\n                    target.actor.update({ \"data.traits.dr.value\": resistances })\n                    ActorSetFlag.execute(args[1], 'world', 'ProtectionFromEnergy', element)\n                    ChatMessage.create({ content: target.name + \" gains resistnace to \" + element })\n                }\n            },\n        },\n    }).render(true);\n}\nif (args[0] === \"off\") {\n    let element = ActorGetFlag.execute(args[1], 'world', 'ProtectionFromEnergy')\n    let resistances = target.actor.data.data.traits.dr.value\n    const index = resistances.indexOf(element)\n    resistances.splice(index, 1)\n    target.actor.update({ \"data.traits.dr.value\": resistances })\n    ActorUnSetFlag.execute(args[1], 'world', 'ProtectionFromEnergy')\n    ChatMessage.create({content : target.name + \"looses resistance to \" + element})\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"uhIg2Pi4h0Q16gSH","name":"Slow","permission":{"default":0,"XE30TcnpPFgl2g1S":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.jvaehnMVWwljPtiH"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\n\nif (args[0] === \"on\" ) {\n    let newSpeed = (speed / 2) + \"ft\";\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": newSpeed });\n    ActorSetFlag.execute(args[1], 'world', 'SlowSpell', speed);\n    ChatMessage.create({ content: target.name + \" has Haste applied\" })\n} \nif (args[0] === \"off\") {\n    let newSpeed = target.actor.getFlag('world', 'SlowSpell')\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\n    ActorUnSetFlag.execute(args[1], 'world', 'SlowSpell');\n    ChatMessage.create({ content: target.name + \" has their speed returned to normal\" })\n}","author":"XE30TcnpPFgl2g1S","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"vzDHS2zuvGJZ30sU","name":"Banishment","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\r\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\r\n\r\nif (args[0] === \"on\") {\r\n    target.update({hidden : true});\r\n    ActorSetFlag.execute(args[1], 'world','banishment', 1);\r\n    ChatMessage.create({content: target.name + \"  was banished\"})\r\n    \r\n}\r\nif(args[0]=== \"off\") {\r\n target.update({hidden : false})\r\n ActorUnSetFlag.execute(args[1], 'world', 'banishment');\r\n ChatMessage.create({content: target.name + \"  returned\"})\r\n}","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"x8eiKNDtJtdOAYtf","name":"ActorUnSetFlag","permission":{"default":0,"SWj23mpjGzaSl512":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).actor.unsetFlag(args[1], args[2]);\r\n","author":"SWj23mpjGzaSl512","img":"icons/svg/dice-target.svg","actorIds":[]}
{"$$deleted":true,"_id":"rP2s0Uebrn3gkTy0"}
{"$$deleted":true,"_id":"DHETVvB5IFP8hqaf"}
